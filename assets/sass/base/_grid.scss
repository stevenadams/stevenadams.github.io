@mixin grid-column($num) {
	$one_col: (100% - (0 * $grid__cols)) / $grid__cols;
	$margin: percentage( $grid__gutter / $grid__max-width );

	width: ( ($one_col * $num) + (0 * ($num - 1)) - $margin);
	margin-right: $margin;
}

@mixin nest-column($num, $context) {
	$one_col: (100% - (0 * $context)) / $num;
	$margin: percentage( $grid__gutter / $grid__max-width );

	width: ( ($one_col * $context) + (0 * ($context - 1)) - $margin);
	margin-right: $margin;
}
 
// Grid container
.grid {
	position: relative;
	display: block;
	margin: 0 auto;
	width: 100%;
	max-width: $grid__max-width;
	padding: 0 20px;

	@extend %clearfix;
	
	&.table{
		display: table;
		height: 100%;
	}


	[class^="grid-"], [class^="nest-"] {
		position: relative;
		float: left;

		&:last-child{
			margin-right: 0;
		}

		&.alpha {
			margin-left: 0;
		}

		&.tight,
		&.omega {
			margin-right: 0;
		}

		&.center{
			float: none;
			margin: 0 auto;

			&.text{
				text-align:center;
			}
		}

		&.right{
			float: right;
		}

		&.clear{
			clear: both;
		}

		&.group{
			@extend %clearfix;
		}
		
	}
	
}
 
// Generates styles
@for $i from 1 to $grid__cols {
	
	.grid-#{$i} {
		@include grid-column($i);

		@for $s from 1 through $i {
			.nest-#{$s} {
				@include nest-column($i, $s);
			}
		}
	}
}