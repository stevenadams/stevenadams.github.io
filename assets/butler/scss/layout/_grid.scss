// Grid Calculation for Percentages
$grid__max-width: $grid__max-width - ($grid__gutter * 2);
$margin_right: percentage($grid__gutter / $grid__max-width);
$col: (($grid__max-width + $grid__gutter) / $grid__columns);

@mixin grid-column($num) {
	width: percentage((($col * $num) - $grid__gutter) / $grid__max-width);
}

@mixin nest-column($context, $num) {
	$cont-width: (( $context * $col) - $grid__gutter);
	width: percentage( (($num * $col) - $grid__gutter) / $cont-width );
	margin-right: percentage($grid__gutter / $cont-width);
}


// Grid container
.grid {
	position: relative;
	display: block;
	margin: 0 auto;
	width: 100%;
	max-width: $grid__max-width;
	padding-left: $grid__gutter;
	padding-right: $grid__gutter;

	@extend %clearfix;


	&--full-height{
		height: 100%;
	}

	&--table{
		display: table;
		height: 100%;
	}
	
	&__col{
		position: relative;
		display: inline-block;
		display: block;
		vertical-align: top;
		margin-right: $margin_right;

		&--tight{
			margin-right: 0;
		}

		// Generates styles
		@for $i from 1 to $grid__columns {
			
			&--#{$i} {
				@include grid-column($i);

				@for $s from 1 through $i {
					&-n#{$s} {
						@include nest-column($i, $s);
					}
				}
			}
		}
	}
}

[class^="grid__col"] {
	float: left;
	&:last-child{
		margin-right: 0;
	}
}	
